package problems;

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous
 * two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5,
 * 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence
 * whose values do not exceed four million, find the sum of the even-valued
 * terms.
 * 
 * @background we define We define the Fibonacci numbers by the following
 *             recurrence: F(0) = 1; F(1) = 1; F(i) = F(i-1)+F(i-2) for i >2.
 *             Thus, each fibonacci number is the sum of the two previous ones,
 *             yielding the sequence 0,1,1,2,3,5,8,13,21,34,55,.. Fibonacci
 *             number are related by the golden ration 0 and its conjugate `0
 *             which are the two roots of the equation x^2 = x+1 with the roots
 *             0 = (1+sqrt(5))/2 = 1.61803.. and `0 = (1-sqrt(5))/2 = -0.61803..
 *             specifically we have F(i) = (0^i - `0^i)/sqrt(5) which we can
 *             prove by induction since |`0| < 1we have |0^i|/sqrt(5) <
 *             1/sqrt(5) which means |0^i|/sqrt(5) < 1/2 which implies F(i) =
 *             floor(0^i/sqrt(5)+0.5) which is to say that the ith Fibonnacci
 *             number is equal to 0^i/sqrt(5) rounded to the nearest integer.
 *             Thus Fibonacci number grows exponentially. Cormen et al page 60
 * @logic odd + odd = even, even + odd = even . starting at 1 and 2 we have 1,
 *        2, 3,5,8,13,21,34. we can start two skipping every two following
 *        numbers until 4000000
 */
public class Problem2_EvenFibonacciNumbers {
	/**
	 * 
	 * @param n
	 * @return
	 */
	public long evenFibSumUnder(long n) {
		
		double goldenRation = (1+Math.sqrt(5))/2;
		//use logarithms to determine fibIndex
		long fibIndex = Math.round(Math.log10(n*Math.sqrt(5))/Math.log10(goldenRation));
		int sum = 0;
		for (long i = 3; i<=fibIndex; i = i+3){
			sum += Math.round(Math.pow(goldenRation,i)/Math.sqrt(5));
		}
		return sum;
	}
}
